name: Elixir CI

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    paths:
      - 'lib/**'
      - 'config/**'
      - '*.exs'
      - '*.lock'
      - 'docs/docs.logflare.com/docs/**'
      - 'native/**'
      - 'priv/**'
      - 'test/**'
      # Run suite when this file is changed
      - '.github/workflows/elixir-ci.yml'

permissions:
  contents: read

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        commands:
          - name: Code Quality - Linting
            run: mix lint --only warnings
          - name: Code Quality - Formatting
            run: mix test.format
          - name: Compilation Warnings
            run: mix test.compile
          - name: Tests
            run: make test
          - name: Security - Sobelow Code Scan
            run: mix test.security
          - name: Typing check
            run: mix test.typings
    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: logflare_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      MIX_ENV: test
      SHELL: /bin/bash
    steps:
      - uses: actions/checkout@v3
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          version-file: .tool-versions
          version-type: strict
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
            dialyzer
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix--dialyzer
      - name: Install dependencies
        run: mix deps.get
      - name: Run DB migrations
        run: MIX_ENV=test mix do ecto.create, ecto.migrate
      - name: Run compilation warnings check
        run: mix test.compile
      - name: Run migrations for test environment
        run: MIX_ENV=test mix do ecto.drop, ecto.create, ecto.migrate
      - name: Run ${{ matrix.commands.name }}
        run: ${{ matrix.commands.cmd }}

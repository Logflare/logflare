<div class="tw-flex tw-my-10 tw-gap-2">
  <.form :let={f} for={@endpoint_changeset} as={:endpoint} id="endpoint" phx-submit="save-endpoint" class="tw-w-1/2 tw-border-r-1 pr-2 tw-border-l-0 tw-border-t-0 tw-border-b-0 tw-border-solid tw-border-gray-600">
    <%= hidden_input(f, :language) %>
    <div class="tw-sticky tw-flex tw-justify-between tw-gap-4">
      <button :if={@show_endpoint} data-confirm="Are you sure? This cannot be undone" phx-click="delete-endpoint" phx-value-endpoint_id={@show_endpoint.id} class="btn btn-outline-danger" type="button">
        <i class="fas fa-trash"></i> Delete
      </button>
      <%= submit("Save changes", class: "btn btn-primary") %>
    </div>

    <.header_with_anchor text="Endpoint Name" />
    <div class="form-group">
      <%= text_input(f, :name,
        placeholder: "YourApp.EndpointName",
        class: "form-control form-control-margin",
        "phx-update": "ignore"
      ) %>
      <%= error_tag(f, :name) %>
      <small class="form-text text-muted">
        This endpoint will can be queried at:<br />
        <code><%= url(~p"/api/endpoints/query/YourApp.EndpointName") %></code>
      </small>
    </div>

    <div class="form-group">
      <%= label(f, :description, "Description") %>
      <div class="input-group">
        <%= textarea(f, :description, class: "form-control", "phx-update": "ignore") %>
      </div>
      <%= error_tag(f, :description) %>
      <small class="form-text text-muted">
        Add a helpful description for what this endpoint is used for.
      </small>
    </div>

    <.header_with_anchor text="Query" />
    <section class="tw-flex tw-flex-col">
      <div class="form-group">
        <p>
          This endpoint will execute this query on each <code>GET</code> request.
          Declare parameters using <code>@parameter_name</code> and pass it to the endpoint via query parameters <code>?parameter_name=some-value</code>
        </p>

        <.live_component module={LogflareWeb.MonacoEditorComponent} id="endpoint_query_editor" field={f[:query]} endpoints={@endpoints} alerts={@alerts} sources={@sources} />
      </div>

      <div class="form-group">
        <%= label(f, :max_limit, "Max limit") %>
        <div class="input-group">
          <%= text_input(f, :max_limit,
            placeholder: if(@show_endpoint, do: nil, else: 1000),
            class: "form-control"
          ) %>
          <div class="input-group-append">
            <span class="input-group-text">rows</span>
          </div>
        </div>
        <%= error_tag(f, :max_limit) %>
        <small class="form-text text-muted">
          This option determines the maximium result size returned from BigQuery.
        </small>
      </div>

      <div class="form-group">
        <%= checkbox(f, :enable_auth, id: "auth-checkbox", class: "form-check-input") %>
        <%= label(f, :enable_auth, "Enable authentication",
          for: "auth-checkbox",
          class: "form-check-label"
        ) %>
        <%= error_tag(f, :enable_auth) %>
        <small class="form-text text-muted">
          Endpoints with authentication enabled will require an access token to be provided on each request.
        </small>
      </div>

      <div class="">
        <%= checkbox(f, :sandboxable, id: "sandboxable-checkbox", class: "form-check-input") %>
        <%= label(f, :sandboxable, "Enable query sandboxing",
          for: "sandboxable-checkbox",
          class: "form-check-label"
        ) %>
        <%= error_tag(f, :sandboxable) %>
        <small class="form-text text-muted">
          Endpoints with sandboxing enabled will accept an <code>?sql=</code> query parameter that will be inserted as the outer query of the defined CTE.
          This restricts users of the endpoint to only query within the defined CTE result sets.
        </small>
      </div>
    </section>

    <.header_with_anchor text="Caching" />
    <section class="tw-flex tw-flex-col tw-gap-2 tw-w-full">
      <div>
        <%= label(f, :cache_duration_seconds, "Cache TTL") %>
        <div class="input-group">
          <%= text_input(f, :cache_duration_seconds,
            placeholder: if(@show_endpoint, do: nil, else: 3600),
            class: "form-control"
          ) %>
          <div class="input-group-append">
            <span class="input-group-text">seconds</span>
          </div>
        </div>
        <%= error_tag(f, :cache_duration_seconds) %>
        <small class="form-text text-muted">
          Endpoint results are cached on a per-request basis. Set Cache TTL to <code>0</code> to disable caching completely.
        </small>
      </div>
      <div>
        <%= label(f, :proactive_requerying_seconds, "Proactive Re-querying") %>
        <div class="input-group">
          <%= text_input(f, :proactive_requerying_seconds,
            placeholder: if(@show_endpoint, do: nil, else: 1800),
            class: "form-control"
          ) %>
          <div class="input-group-append">
            <span class="input-group-text">seconds</span>
          </div>
        </div>
        <%= error_tag(f, :proactive_requerying_seconds) %>
        <small class="form-text text-muted">
          Cached results will be refreshed at this interval. Ignored if caching is disabled.
        </small>
      </div>
      <div>
        <%= label(f, :labels, "Query Execution Labels") %>
        <div class="input-group">
          <%= text_input(f, :labels,
            placeholder: if(@show_endpoint, do: nil, else: ""),
            class: "form-control"
          ) %>
        </div>
        <%= error_tag(f, :labels) %>
        <small class="form-text text-muted">
          A comma-separated allowlist of labels to be added to the query execution backend. To reference parameters, use the format <code>my_param=@my_param,my_other_field,meta</code>.
          Key value pairs will be added to the query execution backend using the <code>LF-ENDPOINT-LABELS: my_other_field=some-val,meta=123</code> request header.
        </small>
      </div>
    </section>
  </.form>
  <aside class="tw-w-1/2">
    <.run_query_form {assigns} />
    <.run_query_result {assigns} />
  </aside>
</div>
